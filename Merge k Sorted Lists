import heapq
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __lt__(self, other):
        return self.val < other.val

def mergeKLists(lists):
    heap = []
    for l in lists:
        if l:
            heapq.heappush(heap, l)

    dummy = ListNode()
    current = dummy

    while heap:
        node = heapq.heappop(heap)
        current.next = node
        current = current.next
        if node.next:
            heapq.heappush(heap, node.next)

    return dummy.next

def build_linked_lists(arrays):
    lists = []
    for array in arrays:
        head = ListNode(array[0])
        current = head
        for val in array[1:]:
            current.next = ListNode(val)
            current = current.next
        lists.append(head)
    return lists

def linked_list_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

lists = build_linked_lists([[1, 4, 5], [1, 3, 4], [2, 6]])
merged_list = mergeKLists(lists)
output = linked_list_to_list(merged_list)
print(output)  
